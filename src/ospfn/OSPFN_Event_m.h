//
// Generated file, do not edit! Created by nedtool 4.6 from ospfn/OSPFN_Event.msg.
//

#ifndef _OSPFN_EVENT_M_H_
#define _OSPFN_EVENT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "MACAddress.h"
using namespace inet;
// }}

/**
 * Enum generated from <tt>ospfn/OSPFN_Event.msg:23</tt> by nedtool.
 * <pre>
 * enum EventType
 * {
 * 
 *     SEND_HELLO_PACKET = 1;
 *     FLOOD_HELLO_PACKET = 2;
 *     SEND_LSA = 3;
 * 
 * }
 * </pre>
 */
enum EventType {
    SEND_HELLO_PACKET = 1,
    FLOOD_HELLO_PACKET = 2,
    SEND_LSA = 3
};

/**
 * Class generated from <tt>ospfn/OSPFN_Event.msg:32</tt> by nedtool.
 * <pre>
 * packet OSPFN_Event
 * {
 *     char eventType @enum(EventType) = SEND_HELLO_PACKET;
 * }
 * </pre>
 */
class OSPFN_Event : public ::cPacket
{
  protected:
    char eventType_var;

  private:
    void copy(const OSPFN_Event& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OSPFN_Event&);

  public:
    OSPFN_Event(const char *name=NULL, int kind=0);
    OSPFN_Event(const OSPFN_Event& other);
    virtual ~OSPFN_Event();
    OSPFN_Event& operator=(const OSPFN_Event& other);
    virtual OSPFN_Event *dup() const {return new OSPFN_Event(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual char getEventType() const;
    virtual void setEventType(char eventType);
};

inline void doPacking(cCommBuffer *b, OSPFN_Event& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OSPFN_Event& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ospfn/OSPFN_Event.msg:37</tt> by nedtool.
 * <pre>
 * packet OSPFN_Event_Hello extends OSPFN_Event
 * {
 *     MACAddress destination;
 * }
 * </pre>
 */
class OSPFN_Event_Hello : public ::OSPFN_Event
{
  protected:
    MACAddress destination_var;

  private:
    void copy(const OSPFN_Event_Hello& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OSPFN_Event_Hello&);

  public:
    OSPFN_Event_Hello(const char *name=NULL, int kind=0);
    OSPFN_Event_Hello(const OSPFN_Event_Hello& other);
    virtual ~OSPFN_Event_Hello();
    OSPFN_Event_Hello& operator=(const OSPFN_Event_Hello& other);
    virtual OSPFN_Event_Hello *dup() const {return new OSPFN_Event_Hello(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getDestination();
    virtual const MACAddress& getDestination() const {return const_cast<OSPFN_Event_Hello*>(this)->getDestination();}
    virtual void setDestination(const MACAddress& destination);
};

inline void doPacking(cCommBuffer *b, OSPFN_Event_Hello& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OSPFN_Event_Hello& obj) {obj.parsimUnpack(b);}


#endif // ifndef _OSPFN_EVENT_M_H_

