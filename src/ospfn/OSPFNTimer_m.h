//
// Generated file, do not edit! Created by nedtool 4.6 from ospfn/OSPFNTimer.msg.
//

#ifndef _OSPFNTIMER_M_H_
#define _OSPFNTIMER_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "INETDefs.h"
// }}

/**
 * Enum generated from <tt>ospfn/OSPFNTimer.msg:23</tt> by nedtool.
 * <pre>
 * enum OSPFNTimerType
 * {
 * 
 *     INTERFACE_HELLO_TIMER = 0;
 *     INTERFACE_WAIT_TIMER = 1;
 *     INTERFACE_ACKNOWLEDGEMENT_TIMER = 3;
 *     NEIGHBOR_INACTIVITY_TIMER = 4;
 *     NEIGHBOR_POLL_TIMER = 5;
 *     NEIGHBOR_DD_RETRANSMISSION_TIMER = 6;
 *     NEIGHBOR_UPDATE_RETRANSMISSION_TIMER = 7;
 *     NEIGHBOR_REQUEST_RETRANSMISSION_TIMER = 8;
 *     DATABASE_AGE_TIMER = 9;
 * }
 * </pre>
 */
enum OSPFNTimerType {
    INTERFACE_HELLO_TIMER = 0,
    INTERFACE_WAIT_TIMER = 1,
    INTERFACE_ACKNOWLEDGEMENT_TIMER = 3,
    NEIGHBOR_INACTIVITY_TIMER = 4,
    NEIGHBOR_POLL_TIMER = 5,
    NEIGHBOR_DD_RETRANSMISSION_TIMER = 6,
    NEIGHBOR_UPDATE_RETRANSMISSION_TIMER = 7,
    NEIGHBOR_REQUEST_RETRANSMISSION_TIMER = 8,
    DATABASE_AGE_TIMER = 9
};

/**
 * Class generated from <tt>ospfn/OSPFNTimer.msg:39</tt> by nedtool.
 * <pre>
 * //
 * // Represents an OSPF Timer
 * //
 * packet OSPFNTimer extends cMessage
 * {
 *     char timerKind @enum(OSPFNTimerType) = INTERFACE_HELLO_TIMER;
 * }
 * </pre>
 */
class OSPFNTimer : public ::cMessage
{
  protected:
    char timerKind_var;

  private:
    void copy(const OSPFNTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OSPFNTimer&);

  public:
    OSPFNTimer(const char *name=NULL, int kind=0);
    OSPFNTimer(const OSPFNTimer& other);
    virtual ~OSPFNTimer();
    OSPFNTimer& operator=(const OSPFNTimer& other);
    virtual OSPFNTimer *dup() const {return new OSPFNTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual char getTimerKind() const;
    virtual void setTimerKind(char timerKind);
};

inline void doPacking(cCommBuffer *b, OSPFNTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OSPFNTimer& obj) {obj.parsimUnpack(b);}


#endif // ifndef _OSPFNTIMER_M_H_

